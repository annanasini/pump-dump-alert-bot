import os
import asyncio
from telegram import Update, Bot
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import requests

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
PRICE_THRESHOLD_PERCENT = 3      # –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã (%)
VOLUME_THRESHOLD_PERCENT = 50    # –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä—ë–º–∞ (%)
CHECK_INTERVAL = 60               # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
MIN_VOLUME_USDT = 50000           # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (USDT)

previous_data = {}

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–º–ø—ã/–¥–∞–º–ø—ã –Ω–∞ Binance ‚úÖ"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –Ω–∞ Binance –∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ü–µ–Ω—ã –∏ –æ–±—ä—ë–º–∞.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞."
    )

# –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã —Å USDT
def fetch_all_symbols():
    url = "https://api.binance.com/api/v3/ticker/24hr"
    try:
        response = requests.get(url, timeout=10)
        data = response.json()
        coins = []
        for d in data:
            if 'symbol' in d and d['symbol'].endswith("USDT"):
                coins.append(d['symbol'])
        return coins
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–Ω–µ—Ç:", e)
        return []

# –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏ –æ–±—ä—ë–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã
def fetch_price_volume(symbol):
    url = f"https://api.binance.com/api/v3/ticker/24hr?symbol={symbol}"
    try:
        data = requests.get(url, timeout=5).json()
        price = float(data['lastPrice'])
        volume = float(data['quoteVolume'])
        return price, volume
    except:
        return None, None

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –∏ –æ–±—ä—ë–º–æ–≤
async def monitor():
    bot = Bot(token=TELEGRAM_TOKEN)
    global previous_data

    coins = fetch_all_symbols()
    if not coins:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç —Å Binance. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–ª–∏ API.")
        return
    print(f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º {len(coins)} –º–æ–Ω–µ—Ç –Ω–∞ Binance...")

    while True:
        for coin in coins:
            price, volume = fetch_price_volume(coin)
            if price is None or volume is None:
                continue
            if volume < MIN_VOLUME_USDT:
                continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ–ª–∫–∏–µ –æ–±—ä—ë–º—ã

            if coin in previous_data:
                old_price, old_volume = previous_data[coin]

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
                price_change = ((price - old_price) / old_price) * 100
                if abs(price_change) >= PRICE_THRESHOLD_PERCENT:
                    direction = "üìà –ü–∞–º–ø" if price_change > 0 else "üìâ –î–∞–º–ø"
                    await bot.send_message(
                        chat_id=CHAT_ID,
                        text=f"{direction}: {coin} –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ {price_change:.2f}%\n–°–µ–π—á–∞—Å: {price:.2f}$"
                    )

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä—ë–º–∞
                volume_change = ((volume - old_volume) / old_volume) * 100
                if abs(volume_change) >= VOLUME_THRESHOLD_PERCENT:
                    await bot.send_message(
                        chat_id=CHAT_ID,
                        text=f"üí• –†–µ–∑–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä—ë–º–∞: {coin} –æ–±—ä—ë–º –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ {volume_change:.2f}%\n–°–µ–π—á–∞—Å: {volume:.2f} USDT"
                    )

            previous_data[coin] = (price, volume)

        await asyncio.sleep(CHECK_INTERVAL)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))

    # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    app.job_queue.run_repeating(lambda ctx: asyncio.create_task(monitor()), interval=CHECK_INTERVAL, first=5)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç –∫–æ–º–∞–Ω–¥...")
    app.run_polling()
